import Dashboard from './dashboard';
declare class DashboardChartEventSender {
    chartId: string;
    dashboard: Dashboard;
    constructor(chartId: string, dashboard: Dashboard);
    /**
     * Send message to embedded app via dashboard.
     */
    _send(msgName: string, ...payload: unknown[]): Promise<[unknown]>;
}
declare const DashboardChart_base: {
    new (...args: any[]): {
        refresh(): Promise<void>;
        _send(msgName: string, ...payload: unknown[]): Promise<[unknown]>;
    };
} & {
    new (...args: any[]): {
        _eventHandlers: Record<import("./types").EmbedChartEvent, Record<string, {
            handle: import("./types").EventHandler;
            options: import("./types").EventHandlerOptions;
        }>>;
        _handleEvent(event: import("./types").EmbedChartEvent, payload: Record<string, unknown>, handlerIds: string[]): void;
        addEventListener(event: import("./types").EmbedChartEvent, eventHandler: import("./types").EventHandler, options?: import("./types").EventHandlerOptions): Promise<unknown>;
        removeEventListener(event: import("./types").EmbedChartEvent, eventHandler: import("./types").EventHandler, options?: import("./types").EventHandlerOptions): Promise<unknown>;
        _send(msgName: string, ...payload: unknown[]): Promise<[unknown]>;
    };
} & typeof DashboardChartEventSender;
export default class DashboardChart extends DashboardChart_base {
}
export type { DashboardChart };
